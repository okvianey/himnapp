{"version":3,"file":"component---src-pages-index-js-1ec48296830382df9ea1.js","mappings":"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","sources":["webpack://himnapp/./node_modules/@mui/system/esm/colorManipulator.js","webpack://himnapp/./src/components/searchBar.js","webpack://himnapp/./src/pages/index.js","webpack://himnapp/./node_modules/@mui/icons-material/Search.js"],"sourcesContent":["import _formatMuiErrorMessage from \"@mui/utils/formatMuiErrorMessage\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport clamp from '@mui/utils/clamp';\n/**\n * Returns a number whose value is limited to the given range.\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clampWrapper(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);\n    }\n  }\n  return clamp(value, min, max);\n}\n\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\nexport function hexToRgb(color) {\n  color = color.slice(1);\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\n  let colors = color.match(re);\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', ')})` : '';\n}\nfunction intToHex(int) {\n  const hex = int.toString(16);\n  return hex.length === 1 ? `0${hex}` : hex;\n}\n\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n  const marker = color.indexOf('(');\n  const type = color.substring(0, marker);\n  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported \\`${color}\\` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : _formatMuiErrorMessage(9, color));\n  }\n  let values = color.substring(marker + 1, color.length - 1);\n  let colorSpace;\n  if (type === 'color') {\n    values = values.split(' ');\n    colorSpace = values.shift();\n    if (values.length === 4 && values[3].charAt(0) === '/') {\n      values[3] = values[3].slice(1);\n    }\n    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: unsupported \\`${colorSpace}\\` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : _formatMuiErrorMessage(10, colorSpace));\n    }\n  } else {\n    values = values.split(',');\n  }\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values,\n    colorSpace\n  };\n}\n\n/**\n * Returns a channel created from the input color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {string} - The channel for the color, that can be used in rgba or hsla colors\n */\nexport const colorChannel = color => {\n  const decomposedColor = decomposeColor(color);\n  return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf('hsl') !== -1 && idx !== 0 ? `${val}%` : val).join(' ');\n};\nexport const private_safeColorChannel = (color, warning) => {\n  try {\n    return colorChannel(color);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n};\n\n/**\n * Converts a color object with type and values to a string.\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\nexport function recomposeColor(color) {\n  const {\n    type,\n    colorSpace\n  } = color;\n  let {\n    values\n  } = color;\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = `${values[1]}%`;\n    values[2] = `${values[2]}%`;\n  }\n  if (type.indexOf('color') !== -1) {\n    values = `${colorSpace} ${values.join(' ')}`;\n  } else {\n    values = `${values.join(', ')}`;\n  }\n  return `${type}(${values})`;\n}\n\n/**\n * Converts a color from CSS rgb format to CSS hex format.\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\n */\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n  const {\n    values\n  } = decomposeColor(color);\n  return `#${values.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join('')}`;\n}\n\n/**\n * Converts a color from hsl format to rgb format.\n * @param {string} color - HSL color values\n * @returns {string} rgb color values\n */\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  const {\n    values\n  } = color;\n  const h = values[0];\n  const s = values[1] / 100;\n  const l = values[2] / 100;\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  let type = 'rgb';\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    if (color.type !== 'color') {\n      val /= 255; // normalized\n    }\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\n  });\n\n  // Truncate at 3 digits\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\nexport function getContrastRatio(foreground, background) {\n  const lumA = getLuminance(foreground);\n  const lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\n/**\n * Sets the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} value - value to set the alpha channel to in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function alpha(color, value) {\n  color = decomposeColor(color);\n  value = clampWrapper(value);\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n  if (color.type === 'color') {\n    color.values[3] = `/${value}`;\n  } else {\n    color.values[3] = value;\n  }\n  return recomposeColor(color);\n}\nexport function private_safeAlpha(color, value, warning) {\n  try {\n    return alpha(color, value);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darkens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeDarken(color, coefficient, warning) {\n  try {\n    return darken(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Lightens a color.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clampWrapper(coefficient);\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  } else if (color.type.indexOf('color') !== -1) {\n    for (let i = 0; i < 3; i += 1) {\n      color.values[i] += (1 - color.values[i]) * coefficient;\n    }\n  }\n  return recomposeColor(color);\n}\nexport function private_safeLighten(color, coefficient, warning) {\n  try {\n    return lighten(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Darken or lighten a color, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\nexport function private_safeEmphasize(color, coefficient, warning) {\n  try {\n    return emphasize(color, coefficient);\n  } catch (error) {\n    if (warning && process.env.NODE_ENV !== 'production') {\n      console.warn(warning);\n    }\n    return color;\n  }\n}\n\n/**\n * Blend a transparent overlay color with a background color, resulting in a single\n * RGB color.\n * @param {string} background - CSS color\n * @param {string} overlay - CSS color\n * @param {number} opacity - Opacity multiplier in the range 0 - 1\n * @param {number} [gamma=1.0] - Gamma correction factor. For gamma-correct blending, 2.2 is usual.\n */\nexport function blend(background, overlay, opacity, gamma = 1.0) {\n  const blendChannel = (b, o) => Math.round((b ** (1 / gamma) * (1 - opacity) + o ** (1 / gamma) * opacity) ** gamma);\n  const backgroundColor = decomposeColor(background);\n  const overlayColor = decomposeColor(overlay);\n  const rgb = [blendChannel(backgroundColor.values[0], overlayColor.values[0]), blendChannel(backgroundColor.values[1], overlayColor.values[1]), blendChannel(backgroundColor.values[2], overlayColor.values[2])];\n  return recomposeColor({\n    type: 'rgb',\n    values: rgb\n  });\n}","import React from 'react';\nimport { styled, alpha } from '@mui/material/styles';\nimport SearchIcon from '@mui/icons-material/Search';\nimport {\n  InputBase\n} from \"@mui/material\";\n\nconst Search = styled('div')(({ theme }) => ({\n  position: 'relative',\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\n  '&:hover': {\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\n  },\n  marginLeft: 0,\n  width: '100%',\n  [ theme.breakpoints.up('sm') ]: {\n    // width: 'auto',\n  },\n}));\n\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\n  padding: theme.spacing(0, 2),\n  height: '100%',\n  position: 'absolute',\n  pointerEvents: 'none',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  color: theme.palette.neutral.main,\n}));\n\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\n  color: 'inherit',\n  width: '100%',\n  '& .MuiInputBase-input': {\n    padding: theme.spacing(2, 1, 1, 0),\n    border: `1px solid ${alpha(theme.palette.common.black, 0.15)}`,\n    borderRadius: '5px',\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [ theme.breakpoints.up('md') ]: {\n      // width: '20ch',\n    },\n  },\n  '& .MuiInputBase-input::placeholder': {\n    fontSize: \"1.5rem\",\n  },\n  '& .MuiInputBase-input:focus-visible': {\n    outline: `${alpha(theme.palette.primary.main, 0.25)} auto 1px`,\n  },\n}));\n\nexport default function SearchBar({ handleSearch }) {\n  \n  return (\n    <Search>\n      <SearchIconWrapper>\n          <SearchIcon />\n      </SearchIconWrapper>\n      <StyledInputBase\n        placeholder=\"Buscar himno:\"\n        inputProps={{ 'aria-label': 'buscar' }}\n        onChange={handleSearch}\n      />\n    </Search>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"gatsby\";\nimport Layout from \"../components/layout\";\nimport SearchBar from \"../components/searchBar\";\nimport { styled } from \"@mui/material/styles\";\nimport {\n  Box,\n  List,\n  ListItem,\n  ListItemButton,\n} from \"@mui/material\";\nimport hymnsList from \"../assets/hymnsList.json\";\n\nconst StyledSearchBox = styled(\"div\")(({ theme }) => ({\n  padding: 16,\n  // border: \"1px dashed grey\",\n  display: \"flex\",\n  alignItems: \"center\",\n  [ theme.breakpoints.down(\"sm\") ]: {\n    flexDirection: \"column\",\n    alignItems: \"flex-start\",\n  },\n}));\n\nconst IndexPage = () => {\n  const [ input, setInput ] = useState(\"\");\n  const [ himnario, setHimnario ] = useState(hymnsList);\n\n  const handleInput = (e) => {\n    e.preventDefault();\n    setInput(e.target.value);\n  }\n\n  const filterHymns = (searchText) => {\n    if (!hymnsList || !Array.isArray(hymnsList)) {\n      return []; // Devuelve un array vacío si hymnsList no es válido\n    }\n  \n    if (searchText.trim() === \"\") {\n      return hymnsList; // Devuelve la lista completa si no hay texto de búsqueda\n    }\n  \n    const searchTextUpper = searchText.toUpperCase();\n    return hymnsList.filter((himno) =>\n      himno.frontmatter.title.toUpperCase().includes(searchTextUpper)\n    );\n  };\n\n  useEffect(() => {\n    const filteredHymns = filterHymns(input);\n    setHimnario(filteredHymns || []);\n  }, [input]);\n\n\n  return (\n    <Layout>\n      <Box>\n        <StyledSearchBox>\n          <SearchBar handleSearch={handleInput} />\n        </StyledSearchBox>\n\n        <List sx={{ overflow: \"auto\" }}>\n          {himnario.map((node) => {\n            const keyId = node.id;\n\n            if (node.frontmatter.slug === \"0\") {\n              return null; // No renderizar nada si el slug es \"0\"\n            }\n\n            return (\n              <ListItem key={keyId} disablePadding divider>\n                <ListItemButton\n                  color=\"inherit\"\n                  component={Link}\n                  to={`/himno/${node.frontmatter.slug}`}\n                >\n                  {node.frontmatter.title}\n                </ListItemButton>\n              </ListItem>\n            );\n          })}\n        </List>\n\n      </Box>\n    </Layout>\n  );\n};\n\n// export const Head = () => <Seo title=\"Himnario\" />;\nexport default IndexPage;\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = exports.default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14\"\n}), 'Search');"],"names":["clampWrapper","value","min","max","clamp","decomposeColor","color","type","charAt","slice","re","RegExp","length","colors","match","map","n","index","parseInt","Math","round","join","hexToRgb","marker","indexOf","substring","Error","colorSpace","values","split","shift","parseFloat","recomposeColor","i","alpha","Search","styled","_ref","theme","position","borderRadius","shape","backgroundColor","palette","common","white","marginLeft","width","breakpoints","up","SearchIconWrapper","_ref2","padding","spacing","height","pointerEvents","display","alignItems","justifyContent","neutral","main","StyledInputBase","InputBase","_ref3","border","black","paddingLeft","transition","transitions","create","fontSize","outline","primary","SearchBar","_ref4","handleSearch","React","SearchIcon","placeholder","inputProps","onChange","StyledSearchBox","down","flexDirection","IndexPage","input","setInput","useState","himnario","setHimnario","hymnsList","useEffect","filteredHymns","searchText","Array","isArray","trim","searchTextUpper","toUpperCase","filter","himno","frontmatter","title","includes","filterHymns","Layout","Box","e","preventDefault","target","List","sx","overflow","node","keyId","id","slug","ListItem","key","disablePadding","divider","ListItemButton","component","Link","to","_interopRequireDefault","exports","_createSvgIcon","_jsxRuntime","default","jsx","d"],"sourceRoot":""}